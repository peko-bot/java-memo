package com.orz.dao.impl;

import java.io.Serializable;
import java.util.List;

import javax.annotation.Resource;

import org.apache.xpath.operations.String;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;

import com.orz.dao.GenericDao;

@SuppressWarnings("unchecked")
// @Repository(value = "genericDao")
// 澹版槑姝ょ被涓烘暟鎹寔涔呭眰鐨勭被
public class GenericDaoImpl<T> implements GenericDao<T> {
	private Class<T> clazz;

	/**
	 * 鍚慏AO灞傛敞鍏essionFactory
	 */
	@Resource
	private SessionFactory sessionFactory;

	/**
	 * 閫氳繃鏋勯�犳柟娉曟寚瀹欴AO鐨勫叿浣撳疄鐜扮被
	 */
	// public GenericDaoImpl() {
	// ParameterizedType type = (ParameterizedType) this.getClass()
	// .getGenericSuperclass();
	// clazz = (Class<T>) type.getActualTypeArguments()[0];
	// System.out.println("DAO鐨勭湡瀹炲疄鐜扮被鏄細" + this.clazz.getName());
	// }

	/**
	 * 鑾峰彇褰撳墠宸ヤ綔鐨凷ession
	 */
	protected Session getSession() {
		return this.sessionFactory.getCurrentSession();
	}

	public void save(T entity) {
		this.getSession().save(entity);
	}

	public void update(T entity) {
		this.getSession().update(entity);
	}

	public void delete(Serializable id) {
		this.getSession().delete(this.findById(id));
	}

	public T findById(Serializable id) {
		return (T) this.getSession().get(this.clazz, id);
	}

	public List<T> findByHql(java.lang.String hql, Object... params) {
		Query query = this.getSession().createQuery(hql);
		for (int i = 0; params != null && i < params.length; i++) {
			query.setParameter(i, params);
		}
		return query.list();
	}

}